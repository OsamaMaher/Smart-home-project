
smart_home_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000004aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100a  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f8  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ae  00000000  00000000  00002870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007be  00000000  00000000  00002d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000034dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	92 00       	.word	0x0092	; ????
  56:	ab 00       	.word	0x00ab	; ????
  58:	c4 00       	.word	0x00c4	; ????
  5a:	dd 00       	.word	0x00dd	; ????
  5c:	f5 00       	.word	0x00f5	; ????
  5e:	f5 00       	.word	0x00f5	; ????
  60:	f5 00       	.word	0x00f5	; ????
  62:	f5 00       	.word	0x00f5	; ????
  64:	f5 00       	.word	0x00f5	; ????
  66:	f5 00       	.word	0x00f5	; ????
  68:	f5 00       	.word	0x00f5	; ????
  6a:	f5 00       	.word	0x00f5	; ????
  6c:	f5 00       	.word	0x00f5	; ????
  6e:	f5 00       	.word	0x00f5	; ????
  70:	f5 00       	.word	0x00f5	; ????
  72:	f5 00       	.word	0x00f5	; ????
  74:	f5 00       	.word	0x00f5	; ????
  76:	f5 00       	.word	0x00f5	; ????
  78:	f5 00       	.word	0x00f5	; ????
  7a:	f5 00       	.word	0x00f5	; ????
  7c:	f5 00       	.word	0x00f5	; ????
  7e:	f5 00       	.word	0x00f5	; ????
  80:	f5 00       	.word	0x00f5	; ????
  82:	f5 00       	.word	0x00f5	; ????
  84:	f5 00       	.word	0x00f5	; ????
  86:	f5 00       	.word	0x00f5	; ????
  88:	f5 00       	.word	0x00f5	; ????
  8a:	f5 00       	.word	0x00f5	; ????
  8c:	f5 00       	.word	0x00f5	; ????
  8e:	f5 00       	.word	0x00f5	; ????
  90:	f5 00       	.word	0x00f5	; ????
  92:	f5 00       	.word	0x00f5	; ????
  94:	92 00       	.word	0x0092	; ????
  96:	ab 00       	.word	0x00ab	; ????
  98:	c4 00       	.word	0x00c4	; ????
  9a:	dd 00       	.word	0x00dd	; ????
  9c:	02 01       	movw	r0, r4
  9e:	1b 01       	movw	r2, r22
  a0:	34 01       	movw	r6, r8
  a2:	4d 01       	movw	r8, r26
  a4:	65 01       	movw	r12, r10
  a6:	65 01       	movw	r12, r10
  a8:	65 01       	movw	r12, r10
  aa:	65 01       	movw	r12, r10
  ac:	65 01       	movw	r12, r10
  ae:	65 01       	movw	r12, r10
  b0:	65 01       	movw	r12, r10
  b2:	65 01       	movw	r12, r10
  b4:	65 01       	movw	r12, r10
  b6:	65 01       	movw	r12, r10
  b8:	65 01       	movw	r12, r10
  ba:	65 01       	movw	r12, r10
  bc:	65 01       	movw	r12, r10
  be:	65 01       	movw	r12, r10
  c0:	65 01       	movw	r12, r10
  c2:	65 01       	movw	r12, r10
  c4:	65 01       	movw	r12, r10
  c6:	65 01       	movw	r12, r10
  c8:	65 01       	movw	r12, r10
  ca:	65 01       	movw	r12, r10
  cc:	65 01       	movw	r12, r10
  ce:	65 01       	movw	r12, r10
  d0:	65 01       	movw	r12, r10
  d2:	65 01       	movw	r12, r10
  d4:	65 01       	movw	r12, r10
  d6:	65 01       	movw	r12, r10
  d8:	65 01       	movw	r12, r10
  da:	65 01       	movw	r12, r10
  dc:	02 01       	movw	r0, r4
  de:	1b 01       	movw	r2, r22
  e0:	34 01       	movw	r6, r8
  e2:	4d 01       	movw	r8, r26

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf e5       	ldi	r28, 0x5F	; 95
  ea:	d8 e0       	ldi	r29, 0x08	; 8
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a0 e6       	ldi	r26, 0x60	; 96
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a3 36       	cpi	r26, 0x63	; 99
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
 104:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <DIO_SETPINDIR>:
#include "MACROS.h"
#include <avr/io.h>

void DIO_SETPINDIR(unsigned char port, unsigned char pin, unsigned char value)
{
	switch (port)
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	e1 54       	subi	r30, 0x41	; 65
 112:	f1 09       	sbc	r31, r1
 114:	e4 32       	cpi	r30, 0x24	; 36
 116:	f1 05       	cpc	r31, r1
 118:	08 f0       	brcs	.+2      	; 0x11c <DIO_SETPINDIR+0x10>
 11a:	67 c0       	rjmp	.+206    	; 0x1ea <DIO_SETPINDIR+0xde>
 11c:	e6 5d       	subi	r30, 0xD6	; 214
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	0c 94 13 02 	jmp	0x426	; 0x426 <__tablejump2__>
	{
		case 'A':
		case 'a':
		{
			if (value == 1)
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	59 f4       	brne	.+22     	; 0x13e <DIO_SETPINDIR+0x32>
			{
				SET_BIT(DDRA,pin);
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_SETPINDIR+0x28>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_SETPINDIR+0x24>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,pin);
 13e:	2a b3       	in	r18, 0x1a	; 26
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SETPINDIR+0x3e>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SETPINDIR+0x3a>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	8a bb       	out	0x1a, r24	; 26
 154:	08 95       	ret
			break;
		}
		case 'B':
		case 'b':
		{
			if (value == 1)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	59 f4       	brne	.+22     	; 0x170 <DIO_SETPINDIR+0x64>
			{
				SET_BIT(DDRB,pin);
 15a:	27 b3       	in	r18, 0x17	; 23
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_SETPINDIR+0x5a>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_SETPINDIR+0x56>
 16a:	82 2b       	or	r24, r18
 16c:	87 bb       	out	0x17, r24	; 23
 16e:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRB,pin);
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SETPINDIR+0x70>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SETPINDIR+0x6c>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	87 bb       	out	0x17, r24	; 23
 186:	08 95       	ret
			break;
		}
		case 'C':
		case 'c':
		{
			if (value == 1)
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	59 f4       	brne	.+22     	; 0x1a2 <DIO_SETPINDIR+0x96>
			{
				SET_BIT(DDRC,pin);
 18c:	24 b3       	in	r18, 0x14	; 20
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SETPINDIR+0x8c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SETPINDIR+0x88>
 19c:	82 2b       	or	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRC,pin);
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SETPINDIR+0xa2>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SETPINDIR+0x9e>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	84 bb       	out	0x14, r24	; 20
 1b8:	08 95       	ret
			break;
		}
		case 'D':
		case 'd':
		{
			if (value == 1)
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	59 f4       	brne	.+22     	; 0x1d4 <DIO_SETPINDIR+0xc8>
			{
				SET_BIT(DDRD,pin);
 1be:	21 b3       	in	r18, 0x11	; 17
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_SETPINDIR+0xbe>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_SETPINDIR+0xba>
 1ce:	82 2b       	or	r24, r18
 1d0:	81 bb       	out	0x11, r24	; 17
 1d2:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,pin);
 1d4:	21 b3       	in	r18, 0x11	; 17
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_SETPINDIR+0xd4>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_SETPINDIR+0xd0>
 1e4:	80 95       	com	r24
 1e6:	82 23       	and	r24, r18
 1e8:	81 bb       	out	0x11, r24	; 17
 1ea:	08 95       	ret

000001ec <DIO_WRITE>:
	}
}

void DIO_WRITE(unsigned char port, unsigned char pin, unsigned char value)
{
	switch (port)
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	e1 54       	subi	r30, 0x41	; 65
 1f2:	f1 09       	sbc	r31, r1
 1f4:	e4 32       	cpi	r30, 0x24	; 36
 1f6:	f1 05       	cpc	r31, r1
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <DIO_WRITE+0x10>
 1fa:	67 c0       	rjmp	.+206    	; 0x2ca <DIO_WRITE+0xde>
 1fc:	e2 5b       	subi	r30, 0xB2	; 178
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	0c 94 13 02 	jmp	0x426	; 0x426 <__tablejump2__>
	{
		case 'A':
		case 'a':
		{
			if (value == 1)
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <DIO_WRITE+0x32>
			{
				SET_BIT(PORTA,pin);
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WRITE+0x28>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WRITE+0x24>
 218:	82 2b       	or	r24, r18
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTA,pin);
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_WRITE+0x3e>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_WRITE+0x3a>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	8b bb       	out	0x1b, r24	; 27
 234:	08 95       	ret
			break;
		}
		case 'B':
		case 'b':
		{
			if (value == 1)
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	59 f4       	brne	.+22     	; 0x250 <DIO_WRITE+0x64>
			{
				SET_BIT(PORTB,pin);
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_WRITE+0x5a>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_WRITE+0x56>
 24a:	82 2b       	or	r24, r18
 24c:	88 bb       	out	0x18, r24	; 24
 24e:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pin);
 250:	28 b3       	in	r18, 0x18	; 24
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WRITE+0x70>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WRITE+0x6c>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	88 bb       	out	0x18, r24	; 24
 266:	08 95       	ret
			break;
		}
		case 'C':
		case 'c':
		{
			if (value == 1)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	59 f4       	brne	.+22     	; 0x282 <DIO_WRITE+0x96>
			{
				SET_BIT(PORTC,pin);
 26c:	25 b3       	in	r18, 0x15	; 21
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_WRITE+0x8c>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_WRITE+0x88>
 27c:	82 2b       	or	r24, r18
 27e:	85 bb       	out	0x15, r24	; 21
 280:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pin);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WRITE+0xa2>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WRITE+0x9e>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret
			break;
		}
		case 'D':
		case 'd':
		{
			if (value == 1)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_WRITE+0xc8>
			{
				SET_BIT(PORTD,pin);
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_WRITE+0xbe>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_WRITE+0xba>
 2ae:	82 2b       	or	r24, r18
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTD,pin);
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WRITE+0xd4>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WRITE+0xd0>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	82 bb       	out	0x12, r24	; 18
 2ca:	08 95       	ret

000002cc <LED_INIT>:
	DIO_SET_PORT_DIR(port, 1);
}

void LED_INIT(unsigned char port, unsigned char pin)
{
	DIO_SETPINDIR(port, pin, 1);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_SETPINDIR>
 2d2:	08 95       	ret

000002d4 <LED_ON>:
}

void LED_ON(unsigned char port, unsigned char pin)
{
	DIO_WRITE(port, pin, 1);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_WRITE>
 2da:	08 95       	ret

000002dc <LED_OFF>:
}

void LED_OFF(unsigned char port, unsigned char pin)
{
	DIO_WRITE(port, pin, 0);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <DIO_WRITE>
 2e2:	08 95       	ret

000002e4 <main>:
unsigned char choice;
unsigned char AC_temp = 0;

int main(void)
{
	LED_INIT('D',0);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	84 e4       	ldi	r24, 0x44	; 68
 2e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_INIT>
	LED_INIT('D',1);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	84 e4       	ldi	r24, 0x44	; 68
 2f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_INIT>
	LED_INIT('D',2);
 2f4:	62 e0       	ldi	r22, 0x02	; 2
 2f6:	84 e4       	ldi	r24, 0x44	; 68
 2f8:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_INIT>
	LED_INIT('D',3);
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_INIT>
	LED_INIT('D',4);
 304:	64 e0       	ldi	r22, 0x04	; 4
 306:	84 e4       	ldi	r24, 0x44	; 68
 308:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_INIT>
	LED_INIT('D',5);
 30c:	65 e0       	ldi	r22, 0x05	; 5
 30e:	84 e4       	ldi	r24, 0x44	; 68
 310:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_INIT>
    SPI_slave_init();
 314:	0e 94 07 02 	call	0x40e	; 0x40e <SPI_slave_init>
    while (1) 
    {
		choice_romm = SPI_Slave_Receive_char('1');
 318:	81 e3       	ldi	r24, 0x31	; 49
 31a:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 31e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <choice_romm>
		switch (choice_romm)
 322:	82 33       	cpi	r24, 0x32	; 50
 324:	91 f1       	breq	.+100    	; 0x38a <main+0xa6>
 326:	28 f4       	brcc	.+10     	; 0x332 <main+0x4e>
 328:	80 33       	cpi	r24, 0x30	; 48
 32a:	49 f0       	breq	.+18     	; 0x33e <main+0x5a>
 32c:	81 33       	cpi	r24, 0x31	; 49
 32e:	d1 f0       	breq	.+52     	; 0x364 <main+0x80>
 330:	f3 cf       	rjmp	.-26     	; 0x318 <main+0x34>
 332:	83 33       	cpi	r24, 0x33	; 51
 334:	f1 f1       	breq	.+124    	; 0x3b2 <main+0xce>
 336:	84 33       	cpi	r24, 0x34	; 52
 338:	09 f4       	brne	.+2      	; 0x33c <main+0x58>
 33a:	4f c0       	rjmp	.+158    	; 0x3da <main+0xf6>
 33c:	ed cf       	rjmp	.-38     	; 0x318 <main+0x34>
		{
			case '0':
			{
				choice = SPI_Slave_Receive_char('1');
 33e:	81 e3       	ldi	r24, 0x31	; 49
 340:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 344:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <choice>
				if (choice == '0')
 348:	80 33       	cpi	r24, 0x30	; 48
 34a:	29 f4       	brne	.+10     	; 0x356 <main+0x72>
				{
					LED_OFF('D',0);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	84 e4       	ldi	r24, 0x44	; 68
 350:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_OFF>
 354:	e1 cf       	rjmp	.-62     	; 0x318 <main+0x34>
				}
				else if (choice == '1')
 356:	81 33       	cpi	r24, 0x31	; 49
 358:	f9 f6       	brne	.-66     	; 0x318 <main+0x34>
				{
					LED_ON('D',0);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	84 e4       	ldi	r24, 0x44	; 68
 35e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_ON>
 362:	da cf       	rjmp	.-76     	; 0x318 <main+0x34>
				}
				break;
			}
			case '1':
			{
				choice = SPI_Slave_Receive_char('1');
 364:	81 e3       	ldi	r24, 0x31	; 49
 366:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 36a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <choice>
				if (choice == '0')
 36e:	80 33       	cpi	r24, 0x30	; 48
 370:	29 f4       	brne	.+10     	; 0x37c <main+0x98>
				{
					LED_OFF('D',1);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	84 e4       	ldi	r24, 0x44	; 68
 376:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_OFF>
 37a:	ce cf       	rjmp	.-100    	; 0x318 <main+0x34>
				}
				else if (choice == '1')
 37c:	81 33       	cpi	r24, 0x31	; 49
 37e:	61 f6       	brne	.-104    	; 0x318 <main+0x34>
				{
					LED_ON('D',1);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	84 e4       	ldi	r24, 0x44	; 68
 384:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_ON>
 388:	c7 cf       	rjmp	.-114    	; 0x318 <main+0x34>
				}
				break;
			}
			case '2':
			{
				choice = SPI_Slave_Receive_char('1');
 38a:	81 e3       	ldi	r24, 0x31	; 49
 38c:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 390:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <choice>
				if (choice == '0')
 394:	80 33       	cpi	r24, 0x30	; 48
 396:	29 f4       	brne	.+10     	; 0x3a2 <main+0xbe>
				{
					LED_OFF('D',2);
 398:	62 e0       	ldi	r22, 0x02	; 2
 39a:	84 e4       	ldi	r24, 0x44	; 68
 39c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_OFF>
 3a0:	bb cf       	rjmp	.-138    	; 0x318 <main+0x34>
				}
				else if (choice == '1')
 3a2:	81 33       	cpi	r24, 0x31	; 49
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <main+0xc4>
 3a6:	b8 cf       	rjmp	.-144    	; 0x318 <main+0x34>
				{
					LED_ON('D',2);
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	84 e4       	ldi	r24, 0x44	; 68
 3ac:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_ON>
 3b0:	b3 cf       	rjmp	.-154    	; 0x318 <main+0x34>
				}
				break;
			}
			case '3':
			{
				choice = SPI_Slave_Receive_char('1');
 3b2:	81 e3       	ldi	r24, 0x31	; 49
 3b4:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 3b8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <choice>
				if (choice == '0')
 3bc:	80 33       	cpi	r24, 0x30	; 48
 3be:	29 f4       	brne	.+10     	; 0x3ca <main+0xe6>
				{
					LED_OFF('D',3);
 3c0:	63 e0       	ldi	r22, 0x03	; 3
 3c2:	84 e4       	ldi	r24, 0x44	; 68
 3c4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <LED_OFF>
 3c8:	a7 cf       	rjmp	.-178    	; 0x318 <main+0x34>
				}
				else if (choice == '1')
 3ca:	81 33       	cpi	r24, 0x31	; 49
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <main+0xec>
 3ce:	a4 cf       	rjmp	.-184    	; 0x318 <main+0x34>
				{
					LED_ON('D',3);
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	84 e4       	ldi	r24, 0x44	; 68
 3d4:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LED_ON>
 3d8:	9f cf       	rjmp	.-194    	; 0x318 <main+0x34>
			case '4':
			{
				unsigned char i;
				for(i=0;i<2;i++)
				{
					choice = SPI_Slave_Receive_char('1');
 3da:	81 e3       	ldi	r24, 0x31	; 49
 3dc:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 3e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <choice>
					AC_temp = AC_temp + (i+10)*choice - (i*10)*choice;
 3e4:	88 0f       	add	r24, r24
 3e6:	98 2f       	mov	r25, r24
 3e8:	99 0f       	add	r25, r25
 3ea:	99 0f       	add	r25, r25
 3ec:	89 0f       	add	r24, r25
 3ee:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 3f2:	89 0f       	add	r24, r25
 3f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			case '4':
			{
				unsigned char i;
				for(i=0;i<2;i++)
				{
					choice = SPI_Slave_Receive_char('1');
 3f8:	81 e3       	ldi	r24, 0x31	; 49
 3fa:	0e 94 0e 02 	call	0x41c	; 0x41c <SPI_Slave_Receive_char>
 3fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <choice>
					AC_temp = AC_temp + (i+10)*choice - (i*10)*choice;
 402:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 406:	89 0f       	add	r24, r25
 408:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 40c:	85 cf       	rjmp	.-246    	; 0x318 <main+0x34>

0000040e <SPI_slave_init>:
	SPDR =Data;
	
	while (READ_BIT(SPSR,SPIF) == 0);
	
	return SPDR;
}
 40e:	6e 9a       	sbi	0x0d, 6	; 13
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	66 e0       	ldi	r22, 0x06	; 6
 414:	82 e4       	ldi	r24, 0x42	; 66
 416:	0e 94 86 00 	call	0x10c	; 0x10c <DIO_SETPINDIR>
 41a:	08 95       	ret

0000041c <SPI_Slave_Receive_char>:

unsigned char SPI_Slave_Receive_char(unsigned char Data)
{
	SPDR =Data;
 41c:	8f b9       	out	0x0f, r24	; 15
	
	while (READ_BIT(SPSR,SPIF) == 0);
 41e:	77 9b       	sbis	0x0e, 7	; 14
 420:	fe cf       	rjmp	.-4      	; 0x41e <SPI_Slave_Receive_char+0x2>
	
	return SPDR;
 422:	8f b1       	in	r24, 0x0f	; 15
}
 424:	08 95       	ret

00000426 <__tablejump2__>:
 426:	ee 0f       	add	r30, r30
 428:	ff 1f       	adc	r31, r31
 42a:	05 90       	lpm	r0, Z+
 42c:	f4 91       	lpm	r31, Z
 42e:	e0 2d       	mov	r30, r0
 430:	09 94       	ijmp

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
